// Code generated by mockgen. DO NOT EDIT.
// Source: internal/core/port/video_gateway_port.go

package mocks

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFileManager is a mock of FileManager interface.
type MockFileManager struct {
	ctrl     *gomock.Controller
	recorder *MockFileManagerMockRecorder
}

// MockFileManagerMockRecorder is the mock recorder for MockFileManager.
type MockFileManagerMockRecorder struct {
	mock *MockFileManager
}

// NewMockFileManager creates a new mock instance.
func NewMockFileManager(ctrl *gomock.Controller) *MockFileManager {
	mock := &MockFileManager{ctrl: ctrl}
	mock.recorder = &MockFileManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileManager) EXPECT() *MockFileManagerMockRecorder { return m.recorder }

func (m *MockFileManager) CreateTempFile(ctx context.Context, prefix, suffix string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTempFile", ctx, prefix, suffix)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}
func (mr *MockFileManagerMockRecorder) CreateTempFile(ctx, prefix, suffix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTempFile", reflect.TypeOf((*MockFileManager)(nil).CreateTempFile), ctx, prefix, suffix)
}

func (m *MockFileManager) CreateTempDir(ctx context.Context, prefix string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTempDir", ctx, prefix)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}
func (mr *MockFileManagerMockRecorder) CreateTempDir(ctx, prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTempDir", reflect.TypeOf((*MockFileManager)(nil).CreateTempDir), ctx, prefix)
}

func (m *MockFileManager) WriteToFile(ctx context.Context, filePath string, data io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteToFile", ctx, filePath, data)
	ret0, _ := ret[0].(error)
	return ret0
}
func (mr *MockFileManagerMockRecorder) WriteToFile(ctx, filePath, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteToFile", reflect.TypeOf((*MockFileManager)(nil).WriteToFile), ctx, filePath, data)
}

func (m *MockFileManager) ReadFile(ctx context.Context, filePath string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", ctx, filePath)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}
func (mr *MockFileManagerMockRecorder) ReadFile(ctx, filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockFileManager)(nil).ReadFile), ctx, filePath)
}

func (m *MockFileManager) DeleteFile(ctx context.Context, filePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", ctx, filePath)
	ret0, _ := ret[0].(error)
	return ret0
}
func (mr *MockFileManagerMockRecorder) DeleteFile(ctx, filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockFileManager)(nil).DeleteFile), ctx, filePath)
}

func (m *MockFileManager) DeleteDir(ctx context.Context, dirPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDir", ctx, dirPath)
	ret0, _ := ret[0].(error)
	return ret0
}
func (mr *MockFileManagerMockRecorder) DeleteDir(ctx, dirPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDir", reflect.TypeOf((*MockFileManager)(nil).DeleteDir), ctx, dirPath)
}

func (m *MockFileManager) ListFiles(ctx context.Context, dirPath, pattern string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiles", ctx, dirPath, pattern)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}
func (mr *MockFileManagerMockRecorder) ListFiles(ctx, dirPath, pattern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiles", reflect.TypeOf((*MockFileManager)(nil).ListFiles), ctx, dirPath, pattern)
}

func (m *MockFileManager) GetFileSize(ctx context.Context, filePath string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileSize", ctx, filePath)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}
func (mr *MockFileManagerMockRecorder) GetFileSize(ctx, filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileSize", reflect.TypeOf((*MockFileManager)(nil).GetFileSize), ctx, filePath)
}
