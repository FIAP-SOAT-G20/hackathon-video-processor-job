// Code generated by mockgen. DO NOT EDIT.
// Source: internal/core/port/video_usecase_port.go

package mocks

import (
	context "context"
	reflect "reflect"

	"github.com/FIAP-SOAT-G20/hackathon-video-processor-job/internal/core/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockVideoUseCase is a mock of VideoUseCase interface.
type MockVideoUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockVideoUseCaseMockRecorder
}

// MockVideoUseCaseMockRecorder is the mock recorder for MockVideoUseCase.
type MockVideoUseCaseMockRecorder struct {
	mock *MockVideoUseCase
}

// NewMockVideoUseCase creates a new mock instance.
func NewMockVideoUseCase(ctrl *gomock.Controller) *MockVideoUseCase {
	mock := &MockVideoUseCase{ctrl: ctrl}
	mock.recorder = &MockVideoUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVideoUseCase) EXPECT() *MockVideoUseCaseMockRecorder { return m.recorder }

// ProcessVideo mocks base method.
func (m *MockVideoUseCase) ProcessVideo(ctx context.Context, input dto.ProcessVideoInput) (*dto.ProcessVideoOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessVideo", ctx, input)
	ret0, _ := ret[0].(*dto.ProcessVideoOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessVideo indicates an expected call of ProcessVideo.
func (mr *MockVideoUseCaseMockRecorder) ProcessVideo(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessVideo", reflect.TypeOf((*MockVideoUseCase)(nil).ProcessVideo), ctx, input)
}
