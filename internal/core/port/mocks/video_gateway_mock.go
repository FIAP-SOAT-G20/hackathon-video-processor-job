// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/port/video_gateway_port.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/port/video_gateway_port.go -destination=internal/core/port/mocks/video_gateway_mock.go
//

// Package mock_port is a generated GoMock package.
package mock_port

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockVideoGateway is a mock of VideoGateway interface.
type MockVideoGateway struct {
	ctrl     *gomock.Controller
	recorder *MockVideoGatewayMockRecorder
	isgomock struct{}
}

// MockVideoGatewayMockRecorder is the mock recorder for MockVideoGateway.
type MockVideoGatewayMockRecorder struct {
	mock *MockVideoGateway
}

// NewMockVideoGateway creates a new mock instance.
func NewMockVideoGateway(ctrl *gomock.Controller) *MockVideoGateway {
	mock := &MockVideoGateway{ctrl: ctrl}
	mock.recorder = &MockVideoGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVideoGateway) EXPECT() *MockVideoGatewayMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockVideoGateway) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockVideoGatewayMockRecorder) Delete(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVideoGateway)(nil).Delete), ctx, key)
}

// Download mocks base method.
func (m *MockVideoGateway) Download(ctx context.Context, key string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download", ctx, key)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Download indicates an expected call of Download.
func (mr *MockVideoGatewayMockRecorder) Download(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockVideoGateway)(nil).Download), ctx, key)
}

// Upload mocks base method.
func (m *MockVideoGateway) Upload(ctx context.Context, key string, data io.Reader, contentType string, size int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", ctx, key, data, contentType, size)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockVideoGatewayMockRecorder) Upload(ctx, key, data, contentType, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockVideoGateway)(nil).Upload), ctx, key, data, contentType, size)
}

// MockVideoProcessor is a mock of VideoProcessor interface.
type MockVideoProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockVideoProcessorMockRecorder
	isgomock struct{}
}

// MockVideoProcessorMockRecorder is the mock recorder for MockVideoProcessor.
type MockVideoProcessorMockRecorder struct {
	mock *MockVideoProcessor
}

// NewMockVideoProcessor creates a new mock instance.
func NewMockVideoProcessor(ctrl *gomock.Controller) *MockVideoProcessor {
	mock := &MockVideoProcessor{ctrl: ctrl}
	mock.recorder = &MockVideoProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVideoProcessor) EXPECT() *MockVideoProcessorMockRecorder {
	return m.recorder
}

// ProcessVideo mocks base method.
func (m *MockVideoProcessor) ProcessVideo(ctx context.Context, videoPath string, frameRate float64, outputFormat string) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessVideo", ctx, videoPath, frameRate, outputFormat)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ProcessVideo indicates an expected call of ProcessVideo.
func (mr *MockVideoProcessorMockRecorder) ProcessVideo(ctx, videoPath, frameRate, outputFormat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessVideo", reflect.TypeOf((*MockVideoProcessor)(nil).ProcessVideo), ctx, videoPath, frameRate, outputFormat)
}

// ValidateVideo mocks base method.
func (m *MockVideoProcessor) ValidateVideo(ctx context.Context, videoPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateVideo", ctx, videoPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateVideo indicates an expected call of ValidateVideo.
func (mr *MockVideoProcessorMockRecorder) ValidateVideo(ctx, videoPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateVideo", reflect.TypeOf((*MockVideoProcessor)(nil).ValidateVideo), ctx, videoPath)
}

// MockFileManager is a mock of FileManager interface.
type MockFileManager struct {
	ctrl     *gomock.Controller
	recorder *MockFileManagerMockRecorder
	isgomock struct{}
}

// MockFileManagerMockRecorder is the mock recorder for MockFileManager.
type MockFileManagerMockRecorder struct {
	mock *MockFileManager
}

// NewMockFileManager creates a new mock instance.
func NewMockFileManager(ctrl *gomock.Controller) *MockFileManager {
	mock := &MockFileManager{ctrl: ctrl}
	mock.recorder = &MockFileManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileManager) EXPECT() *MockFileManagerMockRecorder {
	return m.recorder
}

// CreateTempDir mocks base method.
func (m *MockFileManager) CreateTempDir(ctx context.Context, prefix string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTempDir", ctx, prefix)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTempDir indicates an expected call of CreateTempDir.
func (mr *MockFileManagerMockRecorder) CreateTempDir(ctx, prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTempDir", reflect.TypeOf((*MockFileManager)(nil).CreateTempDir), ctx, prefix)
}

// CreateTempFile mocks base method.
func (m *MockFileManager) CreateTempFile(ctx context.Context, prefix, suffix string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTempFile", ctx, prefix, suffix)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTempFile indicates an expected call of CreateTempFile.
func (mr *MockFileManagerMockRecorder) CreateTempFile(ctx, prefix, suffix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTempFile", reflect.TypeOf((*MockFileManager)(nil).CreateTempFile), ctx, prefix, suffix)
}

// DeleteDir mocks base method.
func (m *MockFileManager) DeleteDir(ctx context.Context, dirPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDir", ctx, dirPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDir indicates an expected call of DeleteDir.
func (mr *MockFileManagerMockRecorder) DeleteDir(ctx, dirPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDir", reflect.TypeOf((*MockFileManager)(nil).DeleteDir), ctx, dirPath)
}

// DeleteFile mocks base method.
func (m *MockFileManager) DeleteFile(ctx context.Context, filePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", ctx, filePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockFileManagerMockRecorder) DeleteFile(ctx, filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockFileManager)(nil).DeleteFile), ctx, filePath)
}

// GetFileSize mocks base method.
func (m *MockFileManager) GetFileSize(ctx context.Context, filePath string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileSize", ctx, filePath)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileSize indicates an expected call of GetFileSize.
func (mr *MockFileManagerMockRecorder) GetFileSize(ctx, filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileSize", reflect.TypeOf((*MockFileManager)(nil).GetFileSize), ctx, filePath)
}

// ListFiles mocks base method.
func (m *MockFileManager) ListFiles(ctx context.Context, dirPath, pattern string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiles", ctx, dirPath, pattern)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFiles indicates an expected call of ListFiles.
func (mr *MockFileManagerMockRecorder) ListFiles(ctx, dirPath, pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiles", reflect.TypeOf((*MockFileManager)(nil).ListFiles), ctx, dirPath, pattern)
}

// ReadFile mocks base method.
func (m *MockFileManager) ReadFile(ctx context.Context, filePath string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", ctx, filePath)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockFileManagerMockRecorder) ReadFile(ctx, filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockFileManager)(nil).ReadFile), ctx, filePath)
}

// WriteToFile mocks base method.
func (m *MockFileManager) WriteToFile(ctx context.Context, filePath string, data io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteToFile", ctx, filePath, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteToFile indicates an expected call of WriteToFile.
func (mr *MockFileManagerMockRecorder) WriteToFile(ctx, filePath, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteToFile", reflect.TypeOf((*MockFileManager)(nil).WriteToFile), ctx, filePath, data)
}
