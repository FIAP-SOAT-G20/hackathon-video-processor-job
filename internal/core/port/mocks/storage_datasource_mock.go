// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/port/storage_datasource_port.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/port/storage_datasource_port.go -destination=internal/core/port/mocks/storage_datasource_mock.go
//

// Package mock_port is a generated GoMock package.
package mock_port

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStorageDataSource is a mock of StorageDataSource interface.
type MockStorageDataSource struct {
	ctrl     *gomock.Controller
	recorder *MockStorageDataSourceMockRecorder
	isgomock struct{}
}

// MockStorageDataSourceMockRecorder is the mock recorder for MockStorageDataSource.
type MockStorageDataSourceMockRecorder struct {
	mock *MockStorageDataSource
}

// NewMockStorageDataSource creates a new mock instance.
func NewMockStorageDataSource(ctrl *gomock.Controller) *MockStorageDataSource {
	mock := &MockStorageDataSource{ctrl: ctrl}
	mock.recorder = &MockStorageDataSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageDataSource) EXPECT() *MockStorageDataSourceMockRecorder {
	return m.recorder
}

// DeleteVideo mocks base method.
func (m *MockStorageDataSource) DeleteVideo(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVideo", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVideo indicates an expected call of DeleteVideo.
func (mr *MockStorageDataSourceMockRecorder) DeleteVideo(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVideo", reflect.TypeOf((*MockStorageDataSource)(nil).DeleteVideo), ctx, key)
}

// DownloadVideo mocks base method.
func (m *MockStorageDataSource) DownloadVideo(ctx context.Context, key string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadVideo", ctx, key)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadVideo indicates an expected call of DownloadVideo.
func (mr *MockStorageDataSourceMockRecorder) DownloadVideo(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadVideo", reflect.TypeOf((*MockStorageDataSource)(nil).DownloadVideo), ctx, key)
}

// UploadProcessedFile mocks base method.
func (m *MockStorageDataSource) UploadProcessedFile(ctx context.Context, key string, data io.Reader, contentType string, size int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadProcessedFile", ctx, key, data, contentType, size)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadProcessedFile indicates an expected call of UploadProcessedFile.
func (mr *MockStorageDataSourceMockRecorder) UploadProcessedFile(ctx, key, data, contentType, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadProcessedFile", reflect.TypeOf((*MockStorageDataSource)(nil).UploadProcessedFile), ctx, key, data, contentType, size)
}
