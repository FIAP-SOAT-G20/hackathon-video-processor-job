// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/port/video_controller_port.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/port/video_controller_port.go -destination=internal/core/port/mocks/video_controller_mock.go
//

// Package mock_port is a generated GoMock package.
package mock_port

import (
	context "context"
	reflect "reflect"

	dto "github.com/FIAP-SOAT-G20/hackathon-video-processor-job/internal/core/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockVideoController is a mock of VideoController interface.
type MockVideoController struct {
	ctrl     *gomock.Controller
	recorder *MockVideoControllerMockRecorder
	isgomock struct{}
}

// MockVideoControllerMockRecorder is the mock recorder for MockVideoController.
type MockVideoControllerMockRecorder struct {
	mock *MockVideoController
}

// NewMockVideoController creates a new mock instance.
func NewMockVideoController(ctrl *gomock.Controller) *MockVideoController {
	mock := &MockVideoController{ctrl: ctrl}
	mock.recorder = &MockVideoControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVideoController) EXPECT() *MockVideoControllerMockRecorder {
	return m.recorder
}

// ProcessVideo mocks base method.
func (m *MockVideoController) ProcessVideo(ctx context.Context, input dto.ProcessVideoInput) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessVideo", ctx, input)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessVideo indicates an expected call of ProcessVideo.
func (mr *MockVideoControllerMockRecorder) ProcessVideo(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessVideo", reflect.TypeOf((*MockVideoController)(nil).ProcessVideo), ctx, input)
}
