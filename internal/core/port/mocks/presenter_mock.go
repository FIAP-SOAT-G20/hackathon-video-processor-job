// Code generated by mockgen. DO NOT EDIT.
// Source: internal/core/port/presenter_port.go

package mocks

import (
	reflect "reflect"

	"github.com/FIAP-SOAT-G20/hackathon-video-processor-job/internal/core/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockPresenter is a mock of Presenter interface.
type MockPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockPresenterMockRecorder
}

// MockPresenterMockRecorder is the mock recorder for MockPresenter.
type MockPresenterMockRecorder struct {
	mock *MockPresenter
}

// NewMockPresenter creates a new mock instance.
func NewMockPresenter(ctrl *gomock.Controller) *MockPresenter {
	mock := &MockPresenter{ctrl: ctrl}
	mock.recorder = &MockPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPresenter) EXPECT() *MockPresenterMockRecorder { return m.recorder }

func (m *MockPresenter) PresentProcessVideoOutput(output *dto.ProcessVideoOutput) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PresentProcessVideoOutput", output)
	ret0, _ := ret[0].([]byte)
	return ret0
}
func (mr *MockPresenterMockRecorder) PresentProcessVideoOutput(output interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresentProcessVideoOutput", reflect.TypeOf((*MockPresenter)(nil).PresentProcessVideoOutput), output)
}

func (m *MockPresenter) PresentError(err error) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PresentError", err)
	ret0, _ := ret[0].([]byte)
	return ret0
}
func (mr *MockPresenterMockRecorder) PresentError(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresentError", reflect.TypeOf((*MockPresenter)(nil).PresentError), err)
}
