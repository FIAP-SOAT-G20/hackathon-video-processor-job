// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/port/presenter_port.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/port/presenter_port.go -destination=internal/core/port/mocks/presenter_mock.go
//

// Package mock_port is a generated GoMock package.
package mock_port

import (
	reflect "reflect"

	dto "github.com/FIAP-SOAT-G20/hackathon-video-processor-job/internal/core/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockPresenter is a mock of Presenter interface.
type MockPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockPresenterMockRecorder
	isgomock struct{}
}

// MockPresenterMockRecorder is the mock recorder for MockPresenter.
type MockPresenterMockRecorder struct {
	mock *MockPresenter
}

// NewMockPresenter creates a new mock instance.
func NewMockPresenter(ctrl *gomock.Controller) *MockPresenter {
	mock := &MockPresenter{ctrl: ctrl}
	mock.recorder = &MockPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPresenter) EXPECT() *MockPresenterMockRecorder {
	return m.recorder
}

// PresentError mocks base method.
func (m *MockPresenter) PresentError(err error) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PresentError", err)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PresentError indicates an expected call of PresentError.
func (mr *MockPresenterMockRecorder) PresentError(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresentError", reflect.TypeOf((*MockPresenter)(nil).PresentError), err)
}

// PresentProcessVideoOutput mocks base method.
func (m *MockPresenter) PresentProcessVideoOutput(output *dto.ProcessVideoOutput) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PresentProcessVideoOutput", output)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PresentProcessVideoOutput indicates an expected call of PresentProcessVideoOutput.
func (mr *MockPresenterMockRecorder) PresentProcessVideoOutput(output any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresentProcessVideoOutput", reflect.TypeOf((*MockPresenter)(nil).PresentProcessVideoOutput), output)
}
